1. Web Application Enumeration

Note, this is once we have done the initial information gathering step in a pen test.

We need to have Go installed. https://github.com/Dewalt-arch/pimpmykali

AssetFinder

install Assetfinder https://github.com/tomnomnom/assetfinder

syntax: go get -u github.com/tomnomnom/assetfinder
right, now we can use Assetfinder to find sub domains. 

syntax: assetfinder domain.com > output.txt
This is really fast. It is worth noting that is not only finds sub domains, but also assets that might belong to or are owned by the company. 
If we just want subdomains, we can run:

syntax: assetfinder --subs-only domainname > output.txt

Amass - an OWASP tool 
Should be installed on Kali already. It is very slow. 

syntax: amass enum -d domainname

HTTPprobe 

useful to check if sites are up. 

GoWitness

https://github.com/sensepost/gowitness - for screenshots of websites

Note that GoWitness needs at least version 1.16 of Golang installed (at the moment) to run and needs Chromium installed on Kali to actually work. 

An automation script is available called run.sh which will automatically run against a domain and do all of the above, plus run an nmap scan and more. 

OWASP Top 10

https://owasp.org/www-project-top-ten/
https://owasp.org/www-pdf-archive/OWASP_Top_10-2017_%28en%29.pdf.pdf

OWASP Check List

https://github.com/tanprathan/OWASP-Testing-Checklist

OWASP Testing Guide

https://owasp.org/www-project-web-security-testing-guide/assets/archive/OWASP_Testing_Guide_v4.pdf

1. SQL Injection

On a login form, we can use Burp Suite to intercept the request when we try to log in with a username and password. Once we have that intercept, we can change the values for the username and send requests and then see the response from the server. It is possible that the server will provide us with some details. 

input: test
SQL: SELECT * FROM Users Where email='test';

Input: test'
SQL: SELECT * FROM Users Where email='test'';

Input: test' OR 1=1; --
SQL: SELECT * FROM Users Where email='test' OR 1=1; --';


Blind SQL injection

Input: test' (sleep 5)
Input: test' (sleep 10)

2. Broken Authentication

If we can click on the forgot password and get information leakage, then that would be a finding. Especially if for example the web app confirms that the email exists as an account and provides us with a specific security question if we try to reset the password. 

If we want to check the session management, we can attempt create an account on the system and then log in. When logging in, send the traffic to Burp Suite and see if there is a session token. See if we can manipulate that token or if it still exists once the user has been logged out. This would indicate broken authentication.

3. Sensitive Data Exposure

We can use Dirbuster or similar to see if we can find any files, backups etc that might be within the website. We can also check the source code and the requests to see if there is any information leakage. 
Worth checking the headers. A useful tool is securityheaders.com 

We should also be checking the encryption on the domain. We can use nmap.

syntax: nmap --script=ssl-enum-ciphers -p 443 domain

4. XML External Entities (XXE)

https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XXE%20Injection/README.md#classic-xxe

<?xml version="1.0" encoding="ISO-8859-1"?> #This is the XML header

<!DOCTYPE gift [ 
	<!ENTITY from "Kim">  #This is is a bit like a variable and we can call it, which means we dont have to type everything out all the time. This is a DTD. 
]>

<gift> #This is the root element
	<To>Frank</To> # These three are the children elements
	<From>&from;</From>  # We are now calling the entity here.
	<Item>Pokemon Cards</Item>

</gift>

Now, if we added an additional name in the from with a special character, it would break the code. But, if we add it in the entity, it would work. Which means that we could add malicious code in the entity as an addition and that would probably work. 

<?xml version="1.0" encoding="ISO-8859-1"?> #This is the XML header

<!DOCTYPE gift [ 
	<!ENTITY from "Kim&Carla"> 
]>

<gift> #This is the root element
	<To>Frank</To> # These three are the children elements
	<From>&from;</From>  # We are now calling the entity here.
	<Item>Pokemon Cards</Item>

</gift>

Classic XXE payload 

<?xml version="1.0" encoding="ISO-8859-1"?>
  <!DOCTYPE foo [  
  <!ELEMENT foo ANY >
  <!ENTITY xxe SYSTEM "file:///etc/passwd" >]><foo>&xxe;</foo>
  
 We can use the above as a file in an upload section of the web app and with Burp Suite we can see the response from the server and see if the system is vulnerable to DTD. DTD needs to be disabled, otherwise this problem will occur. 
 
 5. Broken Access Control
 
 We need to check if we can move to another user or access the admin account. Or, if we can post as a different user. For example, on a feedback form, we could inspect the source and see if we can find a section that says hidden. If we remove the hidden, it might should us the account nr linked to our account. If we then change that nr to another account, can we post feedback as a different user? 
 
 6. Security Misconfiguration
 
 This is a very wide aspect, but it can be anything from default credentials to error messages to misconfigured file upload types (where it says you can only upload PDF, but it still allows any other type of file upload). 
 
 7. Cross Site Scripting XSS
 
 Three types of XSS
 
 Reflected XSS - one injects code and it gets reflected back, it will not get stored
 Stored XSS - a malicious payload it injected onto the application and then stored on the server
 DOM XSS - This focuses on javascript and the Document Object Model (DOM), where a payload is inserted into the DOM. It is also client side, so not stored on the server. 
 
 Reflected example:
 
 If the below was a page called index.php
 
 <?php
 $username = $_GET[´username´]
 echo "Hi $username";
 ?>
 
 if we then went to url/index.php?username=Kim we would get a response like:
 
 Hi Kim
 
 But, if we did this: url/index.php?<script>Alert(1)</script> instead, then this would bring up an alert box on the site. This would be a Reflected XSS. 
 
 An example of Stored XSS
 
 If we take the above code (url/index.php?<script>Alert(1)</script>) and posted it as a comment on a blog post (for example), then every time the page was loaded, the pop up would come up, because it is stored on the server.
 
 It is important to note, for DOM and Reflective, we need to do some Social Engineering and get someone to click on a malicious link. 
 
 DOM based: https://www.scip.ch/en/?labs.20171214
 
 
